namespace AP
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
// Implementation file for parser generated by fsyacc
module Parser =
    open Microsoft.FSharp.Text.Lexing
    open Microsoft.FSharp.Text.Parsing.ParseHelpers
    # 1 "Parser.fsp"
   
    open Ast   

    # 10 "Parser.fs"
    // This type is the type of tokens accepted by the parser
    type token = 
      | END
      | FUN
      | MAIN
      | FOR
      | ASYNC
      | DASYNC
      | RETURN
      | PRINTLN
      | EQUALDEF
      | VAR
      | IF
      | THEN
      | ELSE
      | TINT
      | TBOOL
      | MINUS
      | PLUS
      | TIMES
      | DIVISION
      | EQUALOP
      | DIFFER
      | LOWER
      | LOWEREQ
      | GREATER
      | GREATEREQ
      | COMMA
      | SEMICOLON
      | RPAR
      | LPAR
      | RBRACHET
      | LBRACHET
      | QUOTE
      | AND
      | OR
      | NOT
      | BOOL of (bool)
      | INT of (int)
      | ID of (string)
    // This type is used to give symbolic names to token indexes, useful for error messages
    type tokenId = 
        | TOKEN_END
        | TOKEN_FUN
        | TOKEN_MAIN
        | TOKEN_FOR
        | TOKEN_ASYNC
        | TOKEN_DASYNC
        | TOKEN_RETURN
        | TOKEN_PRINTLN
        | TOKEN_EQUALDEF
        | TOKEN_VAR
        | TOKEN_IF
        | TOKEN_THEN
        | TOKEN_ELSE
        | TOKEN_TINT
        | TOKEN_TBOOL
        | TOKEN_MINUS
        | TOKEN_PLUS
        | TOKEN_TIMES
        | TOKEN_DIVISION
        | TOKEN_EQUALOP
        | TOKEN_DIFFER
        | TOKEN_LOWER
        | TOKEN_LOWEREQ
        | TOKEN_GREATER
        | TOKEN_GREATEREQ
        | TOKEN_COMMA
        | TOKEN_SEMICOLON
        | TOKEN_RPAR
        | TOKEN_LPAR
        | TOKEN_RBRACHET
        | TOKEN_LBRACHET
        | TOKEN_QUOTE
        | TOKEN_AND
        | TOKEN_OR
        | TOKEN_NOT
        | TOKEN_BOOL
        | TOKEN_INT
        | TOKEN_ID
        | TOKEN_end_of_input
        | TOKEN_error
    // This type is used to give symbolic names to token indexes, useful for error messages
    type nonTerminalId = 
        | NONTERM__startstart
        | NONTERM_start
        | NONTERM_Prog
        | NONTERM_Params
        | NONTERM_Type
        | NONTERM_Types
        | NONTERM_RType
        | NONTERM_Decls
        | NONTERM_Decl
        | NONTERM_Stmts
        | NONTERM_Stmt
        | NONTERM_ADExp
        | NONTERM_Block
        | NONTERM_Retfun
        | NONTERM_Fundecs
        | NONTERM_Bool
        | NONTERM_Join
        | NONTERM_Equality
        | NONTERM_Rel
        | NONTERM_Exp
        | NONTERM_Term
        | NONTERM_Unary
        | NONTERM_Factor
        | NONTERM_CFunc
        | NONTERM_CParam
        | NONTERM_CParams

    // This function maps tokens to integers indexes
    let tagOfToken (t:token) = 
      match t with
      | END  -> 0 
      | FUN  -> 1 
      | MAIN  -> 2 
      | FOR  -> 3 
      | ASYNC  -> 4 
      | DASYNC  -> 5 
      | RETURN  -> 6 
      | PRINTLN  -> 7 
      | EQUALDEF  -> 8 
      | VAR  -> 9 
      | IF  -> 10 
      | THEN  -> 11 
      | ELSE  -> 12 
      | TINT  -> 13 
      | TBOOL  -> 14 
      | MINUS  -> 15 
      | PLUS  -> 16 
      | TIMES  -> 17 
      | DIVISION  -> 18 
      | EQUALOP  -> 19 
      | DIFFER  -> 20 
      | LOWER  -> 21 
      | LOWEREQ  -> 22 
      | GREATER  -> 23 
      | GREATEREQ  -> 24 
      | COMMA  -> 25 
      | SEMICOLON  -> 26 
      | RPAR  -> 27 
      | LPAR  -> 28 
      | RBRACHET  -> 29 
      | LBRACHET  -> 30 
      | QUOTE  -> 31 
      | AND  -> 32 
      | OR  -> 33 
      | NOT  -> 34 
      | BOOL _ -> 35 
      | INT _ -> 36 
      | ID _ -> 37 

    // This function maps integers indexes to symbolic token ids
    let tokenTagToTokenId (tokenIdx:int) = 
      match tokenIdx with
      | 0 -> TOKEN_END 
      | 1 -> TOKEN_FUN 
      | 2 -> TOKEN_MAIN 
      | 3 -> TOKEN_FOR 
      | 4 -> TOKEN_ASYNC 
      | 5 -> TOKEN_DASYNC 
      | 6 -> TOKEN_RETURN 
      | 7 -> TOKEN_PRINTLN 
      | 8 -> TOKEN_EQUALDEF 
      | 9 -> TOKEN_VAR 
      | 10 -> TOKEN_IF 
      | 11 -> TOKEN_THEN 
      | 12 -> TOKEN_ELSE 
      | 13 -> TOKEN_TINT 
      | 14 -> TOKEN_TBOOL 
      | 15 -> TOKEN_MINUS 
      | 16 -> TOKEN_PLUS 
      | 17 -> TOKEN_TIMES 
      | 18 -> TOKEN_DIVISION 
      | 19 -> TOKEN_EQUALOP 
      | 20 -> TOKEN_DIFFER 
      | 21 -> TOKEN_LOWER 
      | 22 -> TOKEN_LOWEREQ 
      | 23 -> TOKEN_GREATER 
      | 24 -> TOKEN_GREATEREQ 
      | 25 -> TOKEN_COMMA 
      | 26 -> TOKEN_SEMICOLON 
      | 27 -> TOKEN_RPAR 
      | 28 -> TOKEN_LPAR 
      | 29 -> TOKEN_RBRACHET 
      | 30 -> TOKEN_LBRACHET 
      | 31 -> TOKEN_QUOTE 
      | 32 -> TOKEN_AND 
      | 33 -> TOKEN_OR 
      | 34 -> TOKEN_NOT 
      | 35 -> TOKEN_BOOL 
      | 36 -> TOKEN_INT 
      | 37 -> TOKEN_ID 
      | 40 -> TOKEN_end_of_input
      | 38 -> TOKEN_error
      | _ -> failwith "tokenTagToTokenId: bad token"

    /// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
    let prodIdxToNonTerminal (prodIdx:int) = 
      match prodIdx with
        | 0 -> NONTERM__startstart 
        | 1 -> NONTERM_start 
        | 2 -> NONTERM_Prog 
        | 3 -> NONTERM_Prog 
        | 4 -> NONTERM_Params 
        | 5 -> NONTERM_Params 
        | 6 -> NONTERM_Type 
        | 7 -> NONTERM_Type 
        | 8 -> NONTERM_Type 
        | 9 -> NONTERM_Types 
        | 10 -> NONTERM_Types 
        | 11 -> NONTERM_RType 
        | 12 -> NONTERM_RType 
        | 13 -> NONTERM_RType 
        | 14 -> NONTERM_Decls 
        | 15 -> NONTERM_Decls 
        | 16 -> NONTERM_Decl 
        | 17 -> NONTERM_Decl 
        | 18 -> NONTERM_Stmts 
        | 19 -> NONTERM_Stmts 
        | 20 -> NONTERM_Stmt 
        | 21 -> NONTERM_Stmt 
        | 22 -> NONTERM_Stmt 
        | 23 -> NONTERM_Stmt 
        | 24 -> NONTERM_Stmt 
        | 25 -> NONTERM_ADExp 
        | 26 -> NONTERM_ADExp 
        | 27 -> NONTERM_ADExp 
        | 28 -> NONTERM_Block 
        | 29 -> NONTERM_Retfun 
        | 30 -> NONTERM_Retfun 
        | 31 -> NONTERM_Fundecs 
        | 32 -> NONTERM_Fundecs 
        | 33 -> NONTERM_Bool 
        | 34 -> NONTERM_Bool 
        | 35 -> NONTERM_Join 
        | 36 -> NONTERM_Join 
        | 37 -> NONTERM_Equality 
        | 38 -> NONTERM_Equality 
        | 39 -> NONTERM_Equality 
        | 40 -> NONTERM_Rel 
        | 41 -> NONTERM_Rel 
        | 42 -> NONTERM_Rel 
        | 43 -> NONTERM_Rel 
        | 44 -> NONTERM_Rel 
        | 45 -> NONTERM_Exp 
        | 46 -> NONTERM_Exp 
        | 47 -> NONTERM_Exp 
        | 48 -> NONTERM_Term 
        | 49 -> NONTERM_Term 
        | 50 -> NONTERM_Term 
        | 51 -> NONTERM_Unary 
        | 52 -> NONTERM_Unary 
        | 53 -> NONTERM_Unary 
        | 54 -> NONTERM_Factor 
        | 55 -> NONTERM_Factor 
        | 56 -> NONTERM_Factor 
        | 57 -> NONTERM_Factor 
        | 58 -> NONTERM_Factor 
        | 59 -> NONTERM_CFunc 
        | 60 -> NONTERM_CParam 
        | 61 -> NONTERM_CParams 
        | 62 -> NONTERM_CParams 
        | _ -> failwith "prodIdxToNonTerminal: bad production index"

    let _fsyacc_endOfInputTag = 40 
    let _fsyacc_tagOfErrorTerminal = 38

    // This function gets the name of a token as a string
    let token_to_string (t:token) = 
      match t with 
      | END  -> "END" 
      | FUN  -> "FUN" 
      | MAIN  -> "MAIN" 
      | FOR  -> "FOR" 
      | ASYNC  -> "ASYNC" 
      | DASYNC  -> "DASYNC" 
      | RETURN  -> "RETURN" 
      | PRINTLN  -> "PRINTLN" 
      | EQUALDEF  -> "EQUALDEF" 
      | VAR  -> "VAR" 
      | IF  -> "IF" 
      | THEN  -> "THEN" 
      | ELSE  -> "ELSE" 
      | TINT  -> "TINT" 
      | TBOOL  -> "TBOOL" 
      | MINUS  -> "MINUS" 
      | PLUS  -> "PLUS" 
      | TIMES  -> "TIMES" 
      | DIVISION  -> "DIVISION" 
      | EQUALOP  -> "EQUALOP" 
      | DIFFER  -> "DIFFER" 
      | LOWER  -> "LOWER" 
      | LOWEREQ  -> "LOWEREQ" 
      | GREATER  -> "GREATER" 
      | GREATEREQ  -> "GREATEREQ" 
      | COMMA  -> "COMMA" 
      | SEMICOLON  -> "SEMICOLON" 
      | RPAR  -> "RPAR" 
      | LPAR  -> "LPAR" 
      | RBRACHET  -> "RBRACHET" 
      | LBRACHET  -> "LBRACHET" 
      | QUOTE  -> "QUOTE" 
      | AND  -> "AND" 
      | OR  -> "OR" 
      | NOT  -> "NOT" 
      | BOOL _ -> "BOOL" 
      | INT _ -> "INT" 
      | ID _ -> "ID" 

    // This function gets the data carried by a token as an object
    let _fsyacc_dataOfToken (t:token) = 
      match t with 
      | END  -> (null : System.Object) 
      | FUN  -> (null : System.Object) 
      | MAIN  -> (null : System.Object) 
      | FOR  -> (null : System.Object) 
      | ASYNC  -> (null : System.Object) 
      | DASYNC  -> (null : System.Object) 
      | RETURN  -> (null : System.Object) 
      | PRINTLN  -> (null : System.Object) 
      | EQUALDEF  -> (null : System.Object) 
      | VAR  -> (null : System.Object) 
      | IF  -> (null : System.Object) 
      | THEN  -> (null : System.Object) 
      | ELSE  -> (null : System.Object) 
      | TINT  -> (null : System.Object) 
      | TBOOL  -> (null : System.Object) 
      | MINUS  -> (null : System.Object) 
      | PLUS  -> (null : System.Object) 
      | TIMES  -> (null : System.Object) 
      | DIVISION  -> (null : System.Object) 
      | EQUALOP  -> (null : System.Object) 
      | DIFFER  -> (null : System.Object) 
      | LOWER  -> (null : System.Object) 
      | LOWEREQ  -> (null : System.Object) 
      | GREATER  -> (null : System.Object) 
      | GREATEREQ  -> (null : System.Object) 
      | COMMA  -> (null : System.Object) 
      | SEMICOLON  -> (null : System.Object) 
      | RPAR  -> (null : System.Object) 
      | LPAR  -> (null : System.Object) 
      | RBRACHET  -> (null : System.Object) 
      | LBRACHET  -> (null : System.Object) 
      | QUOTE  -> (null : System.Object) 
      | AND  -> (null : System.Object) 
      | OR  -> (null : System.Object) 
      | NOT  -> (null : System.Object) 
      | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
      | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
      | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
    let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 3us; 65535us; 100us; 17us; 109us; 18us; 118us; 19us; 7us; 65535us; 20us; 21us; 28us; 29us; 33us; 26us; 42us; 43us; 100us; 15us; 109us; 15us; 118us; 15us; 1us; 65535us; 33us; 27us; 4us; 65535us; 34us; 35us; 101us; 102us; 110us; 111us; 119us; 120us; 4us; 65535us; 96us; 36us; 103us; 37us; 112us; 38us; 121us; 39us; 4us; 65535us; 36us; 40us; 37us; 40us; 38us; 40us; 39us; 40us; 4us; 65535us; 36us; 48us; 37us; 49us; 38us; 50us; 39us; 51us; 4us; 65535us; 48us; 52us; 49us; 52us; 50us; 52us; 51us; 52us; 2us; 65535us; 44us; 45us; 54us; 55us; 5us; 65535us; 7us; 8us; 13us; 14us; 59us; 60us; 61us; 62us; 74us; 75us; 3us; 65535us; 104us; 105us; 113us; 114us; 122us; 123us; 1us; 65535us; 0us; 9us; 13us; 65535us; 44us; 81us; 54us; 81us; 57us; 58us; 66us; 67us; 68us; 69us; 72us; 73us; 77us; 78us; 104us; 98us; 113us; 98us; 122us; 98us; 163us; 126us; 170us; 127us; 174us; 127us; 14us; 65535us; 44us; 130us; 54us; 130us; 57us; 130us; 66us; 130us; 68us; 130us; 72us; 130us; 77us; 130us; 104us; 130us; 113us; 130us; 122us; 130us; 128us; 129us; 163us; 130us; 170us; 130us; 174us; 130us; 15us; 65535us; 44us; 133us; 54us; 133us; 57us; 133us; 66us; 133us; 68us; 133us; 72us; 133us; 77us; 133us; 104us; 133us; 113us; 133us; 122us; 133us; 128us; 133us; 131us; 132us; 163us; 133us; 170us; 133us; 174us; 133us; 17us; 65535us; 44us; 138us; 54us; 138us; 57us; 138us; 66us; 138us; 68us; 138us; 72us; 138us; 77us; 138us; 104us; 138us; 113us; 138us; 122us; 138us; 128us; 138us; 131us; 138us; 134us; 135us; 136us; 137us; 163us; 138us; 170us; 138us; 174us; 138us; 21us; 65535us; 44us; 139us; 54us; 139us; 57us; 139us; 66us; 139us; 68us; 139us; 72us; 139us; 77us; 139us; 104us; 139us; 113us; 139us; 122us; 139us; 128us; 139us; 131us; 139us; 134us; 139us; 136us; 139us; 140us; 141us; 142us; 143us; 144us; 145us; 146us; 147us; 163us; 139us; 170us; 139us; 174us; 139us; 23us; 65535us; 44us; 152us; 54us; 152us; 57us; 152us; 66us; 152us; 68us; 152us; 72us; 152us; 77us; 152us; 104us; 152us; 113us; 152us; 122us; 152us; 128us; 152us; 131us; 152us; 134us; 152us; 136us; 152us; 140us; 152us; 142us; 152us; 144us; 152us; 146us; 152us; 148us; 149us; 150us; 151us; 163us; 152us; 170us; 152us; 174us; 152us; 27us; 65535us; 44us; 157us; 54us; 157us; 57us; 157us; 66us; 157us; 68us; 157us; 72us; 157us; 77us; 157us; 104us; 157us; 113us; 157us; 122us; 157us; 128us; 157us; 131us; 157us; 134us; 157us; 136us; 157us; 140us; 157us; 142us; 157us; 144us; 157us; 146us; 157us; 148us; 157us; 150us; 157us; 153us; 154us; 155us; 156us; 158us; 159us; 160us; 161us; 163us; 157us; 170us; 157us; 174us; 157us; 27us; 65535us; 44us; 162us; 54us; 162us; 57us; 162us; 66us; 162us; 68us; 162us; 72us; 162us; 77us; 162us; 104us; 162us; 113us; 162us; 122us; 162us; 128us; 162us; 131us; 162us; 134us; 162us; 136us; 162us; 140us; 162us; 142us; 162us; 144us; 162us; 146us; 162us; 148us; 162us; 150us; 162us; 153us; 162us; 155us; 162us; 158us; 162us; 160us; 162us; 163us; 162us; 170us; 162us; 174us; 162us; 29us; 65535us; 44us; 168us; 54us; 168us; 57us; 168us; 66us; 168us; 68us; 168us; 72us; 168us; 77us; 168us; 84us; 85us; 93us; 94us; 104us; 168us; 113us; 168us; 122us; 168us; 128us; 168us; 131us; 168us; 134us; 168us; 136us; 168us; 140us; 168us; 142us; 168us; 144us; 168us; 146us; 168us; 148us; 168us; 150us; 168us; 153us; 168us; 155us; 168us; 158us; 168us; 160us; 168us; 163us; 168us; 170us; 168us; 174us; 168us; 2us; 65535us; 170us; 173us; 174us; 175us; 1us; 65535us; 170us; 171us; |]
    let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 9us; 17us; 19us; 24us; 29us; 34us; 39us; 44us; 47us; 53us; 57us; 59us; 73us; 88us; 104us; 122us; 144us; 168us; 196us; 224us; 254us; 257us; |]
    let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 31us; 1us; 2us; 1us; 2us; 1us; 2us; 1us; 2us; 2us; 3us; 32us; 2us; 3us; 32us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 2us; 5us; 30us; 2us; 5us; 31us; 2us; 5us; 32us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 10us; 13us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 2us; 15us; 28us; 2us; 15us; 30us; 2us; 15us; 31us; 2us; 15us; 32us; 1us; 15us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 2us; 19us; 28us; 2us; 19us; 30us; 2us; 19us; 31us; 2us; 19us; 32us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 2us; 21us; 22us; 3us; 21us; 22us; 33us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 2us; 23us; 33us; 1us; 23us; 2us; 23us; 33us; 1us; 23us; 1us; 23us; 1us; 23us; 2us; 23us; 33us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 2us; 24us; 33us; 1us; 24us; 1us; 24us; 2us; 25us; 33us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 2us; 29us; 33us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 2us; 33us; 54us; 2us; 33us; 60us; 1us; 33us; 2us; 33us; 35us; 2us; 34us; 35us; 1us; 35us; 3us; 35us; 37us; 38us; 3us; 36us; 37us; 38us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 39us; 7us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 40us; 3us; 40us; 45us; 46us; 1us; 41us; 3us; 41us; 45us; 46us; 1us; 42us; 3us; 42us; 45us; 46us; 1us; 43us; 3us; 43us; 45us; 46us; 1us; 45us; 3us; 45us; 48us; 49us; 1us; 46us; 3us; 46us; 48us; 49us; 3us; 47us; 48us; 49us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 56us; 2us; 57us; 59us; 1us; 58us; 1us; 59us; 1us; 59us; 2us; 59us; 62us; 1us; 59us; 1us; 61us; 1us; 62us; 1us; 62us; |]
    let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 22us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 40us; 43us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 82us; 85us; 88us; 91us; 93us; 96us; 99us; 102us; 104us; 106us; 108us; 110us; 113us; 116us; 119us; 122us; 124us; 126us; 128us; 130us; 132us; 135us; 139us; 142us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 160us; 162us; 165us; 167us; 169us; 171us; 174us; 176us; 178us; 180us; 182us; 185us; 187us; 189us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 284us; 287us; 289us; 292us; 295us; 297us; 301us; 305us; 307us; 309us; 311us; 313us; 315us; 323us; 325us; 329us; 331us; 335us; 337us; 341us; 343us; 347us; 349us; 353us; 355us; 359us; 363us; 365us; 367us; 369us; 371us; 373us; 375us; 377us; 379us; 381us; 383us; 385us; 387us; 389us; 391us; 394us; 396us; 398us; 400us; 403us; 405us; 407us; 409us; |]
    let _fsyacc_action_rows = 176
    let _fsyacc_actionTableElements = [|1us; 32768us; 1us; 4us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 2us; 32768us; 2us; 5us; 37us; 108us; 1us; 32768us; 28us; 6us; 1us; 32768us; 27us; 7us; 1us; 32768us; 30us; 96us; 0us; 16386us; 1us; 32768us; 1us; 10us; 2us; 32768us; 2us; 11us; 37us; 117us; 1us; 32768us; 28us; 12us; 1us; 32768us; 27us; 13us; 1us; 32768us; 30us; 96us; 0us; 16387us; 1us; 32768us; 37us; 16us; 0us; 16388us; 2us; 32768us; 25us; 20us; 27us; 101us; 2us; 32768us; 25us; 20us; 27us; 110us; 2us; 32768us; 25us; 20us; 27us; 119us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 1us; 32768us; 37us; 22us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 2us; 32768us; 25us; 28us; 27us; 34us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 28us; 33us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 3us; 32768us; 1us; 32us; 13us; 30us; 14us; 31us; 0us; 16397us; 1us; 16402us; 9us; 41us; 1us; 16402us; 9us; 41us; 1us; 16402us; 9us; 41us; 1us; 16402us; 9us; 41us; 0us; 16399us; 1us; 32768us; 37us; 42us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 2us; 32768us; 8us; 44us; 26us; 47us; 8us; 32768us; 4us; 82us; 5us; 87us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 1us; 32768us; 26us; 46us; 0us; 16400us; 0us; 16401us; 5us; 32768us; 3us; 63us; 7us; 76us; 10us; 57us; 29us; 97us; 37us; 53us; 5us; 32768us; 3us; 63us; 6us; 104us; 7us; 76us; 10us; 57us; 37us; 53us; 5us; 32768us; 3us; 63us; 6us; 113us; 7us; 76us; 10us; 57us; 37us; 53us; 5us; 32768us; 3us; 63us; 6us; 122us; 7us; 76us; 10us; 57us; 37us; 53us; 0us; 16403us; 1us; 32768us; 8us; 54us; 8us; 32768us; 4us; 82us; 5us; 87us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 1us; 32768us; 26us; 56us; 0us; 16404us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 32768us; 11us; 59us; 33us; 128us; 1us; 32768us; 30us; 96us; 1us; 16405us; 12us; 61us; 1us; 32768us; 30us; 96us; 0us; 16406us; 1us; 32768us; 28us; 64us; 1us; 32768us; 37us; 65us; 1us; 32768us; 8us; 66us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 32768us; 26us; 68us; 33us; 128us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 32768us; 26us; 70us; 33us; 128us; 1us; 32768us; 37us; 71us; 1us; 32768us; 8us; 72us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 32768us; 27us; 74us; 33us; 128us; 1us; 32768us; 30us; 96us; 0us; 16407us; 1us; 32768us; 28us; 77us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 32768us; 27us; 79us; 33us; 128us; 1us; 32768us; 26us; 80us; 0us; 16408us; 1us; 16409us; 33us; 128us; 1us; 32768us; 30us; 83us; 1us; 32768us; 6us; 84us; 1us; 32768us; 37us; 169us; 1us; 32768us; 29us; 86us; 0us; 16410us; 1us; 32768us; 30us; 88us; 1us; 32768us; 31us; 89us; 1us; 32768us; 37us; 90us; 1us; 32768us; 31us; 91us; 1us; 32768us; 25us; 92us; 1us; 32768us; 6us; 93us; 1us; 32768us; 37us; 169us; 1us; 32768us; 29us; 95us; 0us; 16411us; 0us; 16398us; 0us; 16412us; 1us; 16413us; 33us; 128us; 1us; 32768us; 28us; 100us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 3us; 32768us; 1us; 32us; 13us; 30us; 14us; 31us; 1us; 32768us; 30us; 103us; 0us; 16398us; 7us; 32768us; 1us; 99us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 1us; 32768us; 26us; 106us; 1us; 32768us; 29us; 107us; 0us; 16414us; 1us; 32768us; 28us; 109us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 3us; 32768us; 1us; 32us; 13us; 30us; 14us; 31us; 1us; 32768us; 30us; 112us; 0us; 16398us; 7us; 32768us; 1us; 99us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 1us; 32768us; 26us; 115us; 1us; 32768us; 29us; 116us; 0us; 16415us; 1us; 32768us; 28us; 118us; 3us; 32768us; 1us; 25us; 13us; 23us; 14us; 24us; 3us; 32768us; 1us; 32us; 13us; 30us; 14us; 31us; 1us; 32768us; 30us; 121us; 0us; 16398us; 7us; 32768us; 1us; 99us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 1us; 32768us; 26us; 124us; 1us; 32768us; 29us; 125us; 0us; 16416us; 2us; 32768us; 27us; 164us; 33us; 128us; 1us; 16444us; 33us; 128us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 1us; 16417us; 32us; 131us; 1us; 16418us; 32us; 131us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16419us; 19us; 134us; 20us; 136us; 2us; 16420us; 19us; 134us; 20us; 136us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16421us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16422us; 0us; 16423us; 6us; 16428us; 15us; 150us; 16us; 148us; 21us; 140us; 22us; 142us; 23us; 144us; 24us; 146us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16424us; 15us; 150us; 16us; 148us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16425us; 15us; 150us; 16us; 148us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16426us; 15us; 150us; 16us; 148us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16427us; 15us; 150us; 16us; 148us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16429us; 17us; 153us; 18us; 155us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 16430us; 17us; 153us; 18us; 155us; 2us; 16431us; 17us; 153us; 18us; 155us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16432us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16433us; 0us; 16434us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16435us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16436us; 0us; 16437us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 1us; 16441us; 28us; 170us; 0us; 16442us; 1us; 32768us; 28us; 170us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 2us; 32768us; 25us; 174us; 27us; 172us; 0us; 16443us; 0us; 16445us; 6us; 32768us; 15us; 160us; 28us; 163us; 34us; 158us; 35us; 166us; 36us; 165us; 37us; 167us; 0us; 16446us; |]
    let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 9us; 11us; 13us; 15us; 16us; 18us; 21us; 23us; 25us; 27us; 28us; 30us; 31us; 34us; 37us; 40us; 44us; 46us; 47us; 48us; 49us; 50us; 51us; 54us; 58us; 59us; 60us; 61us; 63us; 67us; 71us; 72us; 74us; 76us; 78us; 80us; 81us; 83us; 87us; 90us; 99us; 101us; 102us; 103us; 109us; 115us; 121us; 127us; 128us; 130us; 139us; 141us; 142us; 149us; 152us; 154us; 156us; 158us; 159us; 161us; 163us; 165us; 172us; 175us; 182us; 185us; 187us; 189us; 196us; 199us; 201us; 202us; 204us; 211us; 214us; 216us; 217us; 219us; 221us; 223us; 225us; 227us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 245us; 246us; 247us; 249us; 251us; 255us; 259us; 261us; 262us; 270us; 272us; 274us; 275us; 277us; 281us; 285us; 287us; 288us; 296us; 298us; 300us; 301us; 303us; 307us; 311us; 313us; 314us; 322us; 324us; 326us; 327us; 330us; 332us; 339us; 341us; 343us; 350us; 353us; 356us; 363us; 364us; 371us; 372us; 373us; 380us; 387us; 390us; 397us; 400us; 407us; 410us; 417us; 420us; 427us; 430us; 437us; 440us; 443us; 450us; 451us; 458us; 459us; 460us; 467us; 468us; 475us; 476us; 477us; 484us; 485us; 486us; 487us; 489us; 490us; 492us; 499us; 502us; 503us; 504us; 511us; |]
    let _fsyacc_reductionSymbolCounts = [|1us; 2us; 5us; 6us; 2us; 4us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 5us; 0us; 2us; 6us; 4us; 0us; 2us; 4us; 4us; 6us; 13us; 5us; 1us; 5us; 9us; 4us; 1us; 12us; 13us; 14us; 3us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 1us; 2us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 4us; 1us; 1us; 3us; |]
    let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 20us; 20us; 20us; 21us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 23us; 24us; 25us; 25us; |]
    let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 16390us; 16391us; 16392us; 16393us; 65535us; 65535us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 16401us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16421us; 65535us; 16422us; 16423us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 16433us; 16434us; 65535us; 16435us; 65535us; 16436us; 16437us; 65535us; 16438us; 16439us; 16440us; 65535us; 16442us; 65535us; 65535us; 65535us; 16443us; 16445us; 65535us; 16446us; |]
    let _fsyacc_reductions ()  =    [| 
    # 374 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AP.Ast.Prog)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
                          raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                       )
                     : '_startstart));
    # 383 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 23 "Parser.fsp"
                          _1 
                       )
    # 23 "Parser.fsp"
                     : AP.Ast.Prog));
    # 394 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 26 "Parser.fsp"
                          Prog{Fundecs = []; Main = _5} 
                       )
    # 26 "Parser.fsp"
                     : 'Prog));
    # 405 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundecs)) in
                let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 27 "Parser.fsp"
                          Prog{Fundecs = _1; Main = _6} 
                       )
    # 27 "Parser.fsp"
                     : 'Prog));
    # 417 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 30 "Parser.fsp"
                          [Param(_2,_1)] 
                       )
    # 30 "Parser.fsp"
                     : 'Params));
    # 429 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
                let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 31 "Parser.fsp"
                          _1 @ [Param(_4,_3)] 
                       )
    # 31 "Parser.fsp"
                     : 'Params));
    # 442 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 34 "Parser.fsp"
                          TInt 
                       )
    # 34 "Parser.fsp"
                     : 'Type));
    # 452 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 35 "Parser.fsp"
                          TBool 
                       )
    # 35 "Parser.fsp"
                     : 'Type));
    # 462 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 36 "Parser.fsp"
                          TFun 
                       )
    # 36 "Parser.fsp"
                     : 'Type));
    # 472 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 39 "Parser.fsp"
                          [_1] 
                       )
    # 39 "Parser.fsp"
                     : 'Types));
    # 483 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 40 "Parser.fsp"
                          _1 @ [_3] 
                       )
    # 40 "Parser.fsp"
                     : 'Types));
    # 495 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 43 "Parser.fsp"
                          FInt 
                       )
    # 43 "Parser.fsp"
                     : 'RType));
    # 505 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 44 "Parser.fsp"
                          FBool 
                       )
    # 44 "Parser.fsp"
                     : 'RType));
    # 515 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
                let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'RType)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 45 "Parser.fsp"
                          FFun(_3,_5) 
                       )
    # 45 "Parser.fsp"
                     : 'RType));
    # 527 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 48 "Parser.fsp"
                          [] 
                       )
    # 48 "Parser.fsp"
                     : 'Decls));
    # 537 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decls)) in
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 49 "Parser.fsp"
                          _1 @ [_2] 
                       )
    # 49 "Parser.fsp"
                     : 'Decls));
    # 549 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
                let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'ADExp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 52 "Parser.fsp"
                          DecAssign(_2,_3,_5) 
                       )
    # 52 "Parser.fsp"
                     : 'Decl));
    # 562 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 53 "Parser.fsp"
                          Dec(_2,_3) 
                       )
    # 53 "Parser.fsp"
                     : 'Decl));
    # 574 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 56 "Parser.fsp"
                          [] 
                       )
    # 56 "Parser.fsp"
                     : 'Stmts));
    # 584 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 57 "Parser.fsp"
                          _1 @ [_2] 
                       )
    # 57 "Parser.fsp"
                     : 'Stmts));
    # 596 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ADExp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 60 "Parser.fsp"
                          Assign(_1,_3) 
                       )
    # 60 "Parser.fsp"
                     : 'Stmt));
    # 608 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 61 "Parser.fsp"
                          IfThen(_2,_4) 
                       )
    # 61 "Parser.fsp"
                     : 'Stmt));
    # 620 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
                let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 62 "Parser.fsp"
                          IfThenElse(_2,_4,_6) 
                       )
    # 62 "Parser.fsp"
                     : 'Stmt));
    # 633 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                let _13 = (let data = parseState.GetInput(13) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 63 "Parser.fsp"
                          For{Init = Assign(_3,_5); Cond = _7; Update = Assign(_9,_11); Block = _13} 
                       )
    # 63 "Parser.fsp"
                     : 'Stmt));
    # 649 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 64 "Parser.fsp"
                          Println(_3) 
                       )
    # 64 "Parser.fsp"
                     : 'Stmt));
    # 660 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 67 "Parser.fsp"
                          _1 
                       )
    # 67 "Parser.fsp"
                     : 'ADExp));
    # 671 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'CFunc)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 68 "Parser.fsp"
                          Async(_4) 
                       )
    # 68 "Parser.fsp"
                     : 'ADExp));
    # 682 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'CFunc)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 69 "Parser.fsp"
                          DAsync(_4,_8) 
                       )
    # 69 "Parser.fsp"
                     : 'ADExp));
    # 694 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decls)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 72 "Parser.fsp"
                          Block(_2,_3) 
                       )
    # 72 "Parser.fsp"
                     : 'Block));
    # 706 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 75 "Parser.fsp"
                          RetExpr(_1) 
                       )
    # 75 "Parser.fsp"
                     : 'Retfun));
    # 717 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
                let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'RType)) in
                let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decls)) in
                let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
                let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Retfun)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 76 "Parser.fsp"
                          AFun{Params = _3; TypeRet = _5; Block = Block(_7,_8); Ret = _10} 
                       )
    # 76 "Parser.fsp"
                     : 'Retfun));
    # 732 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
                let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'RType)) in
                let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decls)) in
                let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
                let _11 = (let data = parseState.GetInput(11) in (Microsoft.FSharp.Core.Operators.unbox data : 'Retfun)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 79 "Parser.fsp"
                          [Fun{Name = _2; Params = _4; TypeRet = _6; Block = Block(_8,_9); Ret = _11}] 
                       )
    # 79 "Parser.fsp"
                     : 'Fundecs));
    # 748 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundecs)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
                let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'RType)) in
                let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decls)) in
                let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmts)) in
                let _12 = (let data = parseState.GetInput(12) in (Microsoft.FSharp.Core.Operators.unbox data : 'Retfun)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 80 "Parser.fsp"
                          _1 @ [Fun{Name = _3; Params = _5; TypeRet = _7; Block = Block(_9,_10); Ret = _12}] 
                       )
    # 80 "Parser.fsp"
                     : 'Fundecs));
    # 765 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Join)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 83 "Parser.fsp"
                          Or(_1,_3) 
                       )
    # 83 "Parser.fsp"
                     : 'Bool));
    # 777 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Join)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 84 "Parser.fsp"
                          _1 
                       )
    # 84 "Parser.fsp"
                     : 'Bool));
    # 788 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Join)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equality)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 87 "Parser.fsp"
                          And(_1,_3) 
                       )
    # 87 "Parser.fsp"
                     : 'Join));
    # 800 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equality)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 88 "Parser.fsp"
                          _1 
                       )
    # 88 "Parser.fsp"
                     : 'Join));
    # 811 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equality)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rel)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 91 "Parser.fsp"
                          Equal(_1, _3) 
                       )
    # 91 "Parser.fsp"
                     : 'Equality));
    # 823 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equality)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rel)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 92 "Parser.fsp"
                          Differ(_1,_3) 
                       )
    # 92 "Parser.fsp"
                     : 'Equality));
    # 835 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Rel)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 93 "Parser.fsp"
                          _1 
                       )
    # 93 "Parser.fsp"
                     : 'Equality));
    # 846 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 96 "Parser.fsp"
                          Lower(_1,_3) 
                       )
    # 96 "Parser.fsp"
                     : 'Rel));
    # 858 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 97 "Parser.fsp"
                          LowerEQ(_1,_3) 
                       )
    # 97 "Parser.fsp"
                     : 'Rel));
    # 870 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 98 "Parser.fsp"
                          Greater(_1,_3) 
                       )
    # 98 "Parser.fsp"
                     : 'Rel));
    # 882 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 99 "Parser.fsp"
                          GreaterEQ(_1,_3) 
                       )
    # 99 "Parser.fsp"
                     : 'Rel));
    # 894 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 100 "Parser.fsp"
                          _1 
                       )
    # 100 "Parser.fsp"
                     : 'Rel));
    # 905 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 103 "Parser.fsp"
                          Sum(_1,_3) 
                       )
    # 103 "Parser.fsp"
                     : 'Exp));
    # 917 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exp)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 104 "Parser.fsp"
                          Sub(_1,_3) 
                       )
    # 104 "Parser.fsp"
                     : 'Exp));
    # 929 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 105 "Parser.fsp"
                          _1 
                       )
    # 105 "Parser.fsp"
                     : 'Exp));
    # 940 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 108 "Parser.fsp"
                          Prod(_1,_3) 
                       )
    # 108 "Parser.fsp"
                     : 'Term));
    # 952 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Term)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 109 "Parser.fsp"
                          Div(_1,_3) 
                       )
    # 109 "Parser.fsp"
                     : 'Term));
    # 964 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 110 "Parser.fsp"
                          _1 
                       )
    # 110 "Parser.fsp"
                     : 'Term));
    # 975 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 113 "Parser.fsp"
                          Not(_2) 
                       )
    # 113 "Parser.fsp"
                     : 'Unary));
    # 986 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Unary)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 114 "Parser.fsp"
                          Minus(_2) 
                       )
    # 114 "Parser.fsp"
                     : 'Unary));
    # 997 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Factor)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 115 "Parser.fsp"
                          _1 
                       )
    # 115 "Parser.fsp"
                     : 'Unary));
    # 1008 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 118 "Parser.fsp"
                          ParExp(_2) 
                       )
    # 118 "Parser.fsp"
                     : 'Factor));
    # 1019 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 119 "Parser.fsp"
                          Num(_1) 
                       )
    # 119 "Parser.fsp"
                     : 'Factor));
    # 1030 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 120 "Parser.fsp"
                          Boolean(_1) 
                       )
    # 120 "Parser.fsp"
                     : 'Factor));
    # 1041 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 121 "Parser.fsp"
                          Var(_1) 
                       )
    # 121 "Parser.fsp"
                     : 'Factor));
    # 1052 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CFunc)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 122 "Parser.fsp"
                          _1 
                       )
    # 122 "Parser.fsp"
                     : 'Factor));
    # 1063 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CParams)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 125 "Parser.fsp"
                          Call(_1,_3) 
                       )
    # 125 "Parser.fsp"
                     : 'CFunc));
    # 1075 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Bool)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 128 "Parser.fsp"
                          _1 
                       )
    # 128 "Parser.fsp"
                     : 'CParam));
    # 1086 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CParam)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 131 "Parser.fsp"
                          [_1] 
                       )
    # 131 "Parser.fsp"
                     : 'CParams));
    # 1097 "Parser.fs"
            (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
                let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'CParams)) in
                let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'CParam)) in
                Microsoft.FSharp.Core.Operators.box
                    (
                       (
    # 132 "Parser.fsp"
                          _1 @ [_3] 
                       )
    # 132 "Parser.fsp"
                     : 'CParams));
    |]
    # 1110 "Parser.fs"
    let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
      { reductions= _fsyacc_reductions ();
        endOfInputTag = _fsyacc_endOfInputTag;
        tagOfToken = tagOfToken;
        dataOfToken = _fsyacc_dataOfToken; 
        actionTableElements = _fsyacc_actionTableElements;
        actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
        stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
        stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
        reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
        immediateActions = _fsyacc_immediateActions;
        gotos = _fsyacc_gotos;
        sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
        tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
        parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                                  match parse_error_rich with 
                                  | Some f -> f ctxt
                                  | None -> parse_error ctxt.Message);
        numTerminals = 41;
        productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
    let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
    let start lexer lexbuf : AP.Ast.Prog =
        Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
