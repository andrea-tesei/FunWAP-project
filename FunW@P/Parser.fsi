namespace AP
// Signature file for parser generated by fsyacc
module Parser =
    type token = 
      | END
      | FUN
      | MAIN
      | FOR
      | ASYNC
      | DASYNC
      | RETURN
      | PRINTLN
      | EQUALDEF
      | VAR
      | IF
      | THEN
      | ELSE
      | TINT
      | TBOOL
      | MINUS
      | PLUS
      | TIMES
      | DIVISION
      | EQUALOP
      | DIFFER
      | LOWER
      | LOWEREQ
      | GREATER
      | GREATEREQ
      | COMMA
      | SEMICOLON
      | RPAR
      | LPAR
      | RBRACHET
      | LBRACHET
      | QUOTE
      | AND
      | OR
      | NOT
      | BOOL of (bool)
      | INT of (int)
      | ID of (string)
    type tokenId = 
        | TOKEN_END
        | TOKEN_FUN
        | TOKEN_MAIN
        | TOKEN_FOR
        | TOKEN_ASYNC
        | TOKEN_DASYNC
        | TOKEN_RETURN
        | TOKEN_PRINTLN
        | TOKEN_EQUALDEF
        | TOKEN_VAR
        | TOKEN_IF
        | TOKEN_THEN
        | TOKEN_ELSE
        | TOKEN_TINT
        | TOKEN_TBOOL
        | TOKEN_MINUS
        | TOKEN_PLUS
        | TOKEN_TIMES
        | TOKEN_DIVISION
        | TOKEN_EQUALOP
        | TOKEN_DIFFER
        | TOKEN_LOWER
        | TOKEN_LOWEREQ
        | TOKEN_GREATER
        | TOKEN_GREATEREQ
        | TOKEN_COMMA
        | TOKEN_SEMICOLON
        | TOKEN_RPAR
        | TOKEN_LPAR
        | TOKEN_RBRACHET
        | TOKEN_LBRACHET
        | TOKEN_QUOTE
        | TOKEN_AND
        | TOKEN_OR
        | TOKEN_NOT
        | TOKEN_BOOL
        | TOKEN_INT
        | TOKEN_ID
        | TOKEN_end_of_input
        | TOKEN_error
    type nonTerminalId = 
        | NONTERM__startstart
        | NONTERM_start
        | NONTERM_Prog
        | NONTERM_Params
        | NONTERM_Type
        | NONTERM_Types
        | NONTERM_RType
        | NONTERM_Decls
        | NONTERM_Decl
        | NONTERM_Stmts
        | NONTERM_Stmt
        | NONTERM_ADExp
        | NONTERM_Block
        | NONTERM_Retfun
        | NONTERM_Fundecs
        | NONTERM_Bool
        | NONTERM_Join
        | NONTERM_Equality
        | NONTERM_Rel
        | NONTERM_Exp
        | NONTERM_Term
        | NONTERM_Unary
        | NONTERM_Factor
        | NONTERM_CFunc
        | NONTERM_CParam
        | NONTERM_CParams
    /// This function maps integers indexes to symbolic token ids
    val tagOfToken: token -> int

    /// This function maps integers indexes to symbolic token ids
    val tokenTagToTokenId: int -> tokenId

    /// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
    val prodIdxToNonTerminal: int -> nonTerminalId

    /// This function gets the name of a token as a string
    val token_to_string: token -> string
    val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (AP.Ast.Prog) 
